// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.0--rc1
// source: RPC.proto

package myRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RCenterRPCClient is the client API for RCenterRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RCenterRPCClient interface {
	CreateRoom(ctx context.Context, in *GameRoomFindInfo, opts ...grpc.CallOption) (*RoomInfo, error)
	RoomServerHeart(ctx context.Context, in *RoomServerInfo, opts ...grpc.CallOption) (*Res, error)
}

type rCenterRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRCenterRPCClient(cc grpc.ClientConnInterface) RCenterRPCClient {
	return &rCenterRPCClient{cc}
}

func (c *rCenterRPCClient) CreateRoom(ctx context.Context, in *GameRoomFindInfo, opts ...grpc.CallOption) (*RoomInfo, error) {
	out := new(RoomInfo)
	err := c.cc.Invoke(ctx, "/myRPC.rCenterRPC/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCenterRPCClient) RoomServerHeart(ctx context.Context, in *RoomServerInfo, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/myRPC.rCenterRPC/RoomServerHeart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RCenterRPCServer is the server API for RCenterRPC service.
// All implementations must embed UnimplementedRCenterRPCServer
// for forward compatibility
type RCenterRPCServer interface {
	CreateRoom(context.Context, *GameRoomFindInfo) (*RoomInfo, error)
	RoomServerHeart(context.Context, *RoomServerInfo) (*Res, error)
	mustEmbedUnimplementedRCenterRPCServer()
}

// UnimplementedRCenterRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRCenterRPCServer struct {
}

func (UnimplementedRCenterRPCServer) CreateRoom(context.Context, *GameRoomFindInfo) (*RoomInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRCenterRPCServer) RoomServerHeart(context.Context, *RoomServerInfo) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomServerHeart not implemented")
}
func (UnimplementedRCenterRPCServer) mustEmbedUnimplementedRCenterRPCServer() {}

// UnsafeRCenterRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RCenterRPCServer will
// result in compilation errors.
type UnsafeRCenterRPCServer interface {
	mustEmbedUnimplementedRCenterRPCServer()
}

func RegisterRCenterRPCServer(s grpc.ServiceRegistrar, srv RCenterRPCServer) {
	s.RegisterService(&RCenterRPC_ServiceDesc, srv)
}

func _RCenterRPC_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRoomFindInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCenterRPCServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myRPC.rCenterRPC/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCenterRPCServer).CreateRoom(ctx, req.(*GameRoomFindInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCenterRPC_RoomServerHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCenterRPCServer).RoomServerHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myRPC.rCenterRPC/RoomServerHeart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCenterRPCServer).RoomServerHeart(ctx, req.(*RoomServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RCenterRPC_ServiceDesc is the grpc.ServiceDesc for RCenterRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RCenterRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myRPC.rCenterRPC",
	HandlerType: (*RCenterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RCenterRPC_CreateRoom_Handler,
		},
		{
			MethodName: "RoomServerHeart",
			Handler:    _RCenterRPC_RoomServerHeart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RPC.proto",
}

// RoomRPCClient is the client API for RoomRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomRPCClient interface {
	CreateRoom(ctx context.Context, in *GameRoomFindInfo, opts ...grpc.CallOption) (*RoomInfo, error)
	GetRoomList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoomInfoArray, error)
}

type roomRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomRPCClient(cc grpc.ClientConnInterface) RoomRPCClient {
	return &roomRPCClient{cc}
}

func (c *roomRPCClient) CreateRoom(ctx context.Context, in *GameRoomFindInfo, opts ...grpc.CallOption) (*RoomInfo, error) {
	out := new(RoomInfo)
	err := c.cc.Invoke(ctx, "/myRPC.roomRPC/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRPCClient) GetRoomList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoomInfoArray, error) {
	out := new(RoomInfoArray)
	err := c.cc.Invoke(ctx, "/myRPC.roomRPC/GetRoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomRPCServer is the server API for RoomRPC service.
// All implementations must embed UnimplementedRoomRPCServer
// for forward compatibility
type RoomRPCServer interface {
	CreateRoom(context.Context, *GameRoomFindInfo) (*RoomInfo, error)
	GetRoomList(context.Context, *Empty) (*RoomInfoArray, error)
	mustEmbedUnimplementedRoomRPCServer()
}

// UnimplementedRoomRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRoomRPCServer struct {
}

func (UnimplementedRoomRPCServer) CreateRoom(context.Context, *GameRoomFindInfo) (*RoomInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomRPCServer) GetRoomList(context.Context, *Empty) (*RoomInfoArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomList not implemented")
}
func (UnimplementedRoomRPCServer) mustEmbedUnimplementedRoomRPCServer() {}

// UnsafeRoomRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomRPCServer will
// result in compilation errors.
type UnsafeRoomRPCServer interface {
	mustEmbedUnimplementedRoomRPCServer()
}

func RegisterRoomRPCServer(s grpc.ServiceRegistrar, srv RoomRPCServer) {
	s.RegisterService(&RoomRPC_ServiceDesc, srv)
}

func _RoomRPC_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRoomFindInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRPCServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myRPC.roomRPC/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRPCServer).CreateRoom(ctx, req.(*GameRoomFindInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRPC_GetRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRPCServer).GetRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myRPC.roomRPC/GetRoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRPCServer).GetRoomList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomRPC_ServiceDesc is the grpc.ServiceDesc for RoomRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myRPC.roomRPC",
	HandlerType: (*RoomRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomRPC_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoomList",
			Handler:    _RoomRPC_GetRoomList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RPC.proto",
}
